@page "/Progress"

@rendermode InteractiveServer

<main class="container">
    @if (participant is null || Questionnaires is null || Questions is null)
    {
        <Loading />
    }
    else
    {
        <div class="content">
            @questionnaire.Title
            @if (question is null)
            {
                <Loading />
            }
            else
            {
                <div class="question-card">
                    <div class="question">
                        <h4 class="question-number">@question.Position</h4>
                        <p class="question-text">@question.Text</p>
                    </div>
                    <div class="question-options">
                        @foreach (Option option in question.Scale!.Options.OrderBy(o => o.Score))
                        {
                            <button @onclick="NextQuestion"
                                    class="question-options-item">
                                @option.Label
                            </button>
                        }
                    </div>

                </div>
                <div class="paginator">
                    <nav role="navigation">
                        @if (Questions!.Count > 1)
                        {
                            var nextDisable =
                                questionnaire.Priority >= Questionnaires!.Count
                                &&
                                question.Position >= Questions.Count;
                            <button @onclick="NextQuestion"
                                    disabled=@(nextDisable ? "disabled" : false)>
                                سوال بعد
                            </button>
                            var previousDisable =
                                questionnaire.Priority <= 1
                                &&
                                question.Position <= 1;
                            <button @onclick="PreviousQuestion"
                                    disabled=@(previousDisable ? "disabled" : false)>
                                سوال قبل
                            </button>
                        }
                    </nav>
                </div>
            }
            @*
            <QuickGrid Items="Questionnaires.AsQueryable()" TGridItem="Questionnaire" Pagination="questionnairePagination">
                <TemplateColumn TGridItem="Questionnaire">
                    <ChildContent Context="questionnaire">
                        @if (questionnaire.Questions is null)
                        {
                            <Loading />
                        }
                        else
                        {
                            <QuickGrid Items="@questionnaire.Questions.AsQueryable()" TGridItem="Question" Pagination="questionPagination">
                                <TemplateColumn TGridItem="Question">
                                    <ChildContent Context="question">
                                        <div class="question-card">
                                            <span>
                                                <h4 class="question-number">@question.Position از @questionnaire.Questions.Count</h4>
                                                <p class="question-text">@question.Text</p>
                                            </span>
                                            <div class="question-options">
                                                @foreach (Option option in question.Scale!.Options.OrderBy(o => o.Score))
                                                {
                                                    var currentPage = questionPagination.CurrentPageIndex;
                                                    var lastPage = questionPagination.LastPageIndex;
                                                    <button @onclick="@(() => NextQuestion(currentPage))"
                                                            class="question-options-item">
                                                        @option.Label
                                                    </button>
                                                }
                                            </div>
                                        </div>
                                    </ChildContent>
                                </TemplateColumn>
                            </QuickGrid>
                        }
                    </ChildContent>
                </TemplateColumn>
            </QuickGrid>
            *@
        </div>
        @*
        <div class="paginator">
            <nav role="navigation">
                @if (questionPagination.TotalItemCount.HasValue)
                {
                    var currentPage = questionPagination.CurrentPageIndex;
                    var lastPage = questionPagination.LastPageIndex;
                    <button @onclick="@(() => NextQuestion(currentPage))"
                            disabled=@((currentPage >= lastPage) ? "disabled" : false)>
                        سوال بعد
                    </button>
                    <button @onclick="@(() => PreviousQuestion(currentPage))"
                            disabled=@((currentPage <= 0) ? "disabled" : false)>
                        سوال قبل
                    </button>
                }
            </nav>
        </div>
        *@

    }
</main>

@code {
    private Participant? participant;

    private List<Questionnaire>? Questionnaires;
    private Questionnaire? questionnaire;

    private List<Question>? Questions;
    private Question? question;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbContextFactory.CreateDbContext();

        Questionnaires = await context.Questionnaires
            .OrderBy(q => q.Priority)
            .ToListAsync();

        questionnaire = Questionnaires.FirstOrDefault(q => q.Priority == 1)!;

        Questions = await context.Questions
            .Include(q => q.Scale)
                .ThenInclude(s => s.Options)
            .Where(q => q.QuestionnaireId == questionnaire!.Id)
            .OrderBy(q => q.Position)
            .ToListAsync();

        question = Questions.FirstOrDefault();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            using var context = DbContextFactory.CreateDbContext();
            var localId = await localStorage.GetItemAsync<string>("participantId");
            participant ??= await context.Participants
                .FirstOrDefaultAsync(p => p.Id.ToString() == localId);
            firstRender = false;
            StateHasChanged();
        }
    }

    private async Task NextQuestion()
    {
        var currentQuestion = question!.Position;
        if (currentQuestion < Questions!.Count())
        {
            question = Questions!.FirstOrDefault(q => q.Position == currentQuestion + 1);
        }
        else
        {
            var currentQuestionnaire = questionnaire!.Priority;
            questionnaire = Questionnaires!
                .FirstOrDefault(q => q.Priority == currentQuestionnaire + 1);
            
            if (questionnaire is not null)
            {
                using var context = DbContextFactory.CreateDbContext();
                Questions = await context.Questions
                    .Include(q => q.Scale)
                        .ThenInclude(s => s.Options)
                    .Where(q => q.QuestionnaireId == questionnaire.Id)
                    .ToListAsync();

                question = Questions.FirstOrDefault();
            }
        }
    }

    private async Task PreviousQuestion()
    {
        var currentQuestion = question!.Position;
        if (currentQuestion > 1)
        {
            question = Questions!.FirstOrDefault(q => q.Position == currentQuestion - 1);
        }
        else
        {
            var currentQuestionnaire = questionnaire!.Priority;
            questionnaire = Questionnaires!
                .FirstOrDefault(q => q.Priority == currentQuestionnaire - 1);

            if (questionnaire is not null)
            {
                using var context = DbContextFactory.CreateDbContext();
                Questions = await context.Questions
                    .Include(q => q.Scale)
                        .ThenInclude(s => s.Options)
                    .Where(q => q.QuestionnaireId == questionnaire.Id)
                    .ToListAsync();

                question = Questions.LastOrDefault();
            }
        }
    }
}
